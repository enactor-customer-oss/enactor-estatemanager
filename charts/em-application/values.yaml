# Default values for em-application.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: registry.enactor.com
  repository: lin/ema
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  checksum: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: 
  runAsUser: 1100
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
    http: 39830
    https: 52240
    rmi: 39847
    rmisecure: 52257
    externalhttp: 80
    externalhttps: 443

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

persistentVolume:
  persistentStorageClassName: "default"
  accessModes: 
    - "ReadWriteMany"
  volumeBindingMode: ""
  size: "5Gi"
  selector: []
  volumeName: ""



podDisruptionBudget:
  enabled: true
  minAvailable: 1
  
probes:
  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1

  startupProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 10
    failureThreshold: 10
    successThreshold: 1

globalEnactor:
    extraVars: []

application:
  name: "em-application"
  nameShort: "ema"
  jxmx: '768m'
  extraVars: []
  configMap:
    # -- deploy enactor-web-retail-processing.log.properties
    debugLog:
      enable: false
      # -- choose a new ConfigMap name to provide a new log file
      name: 'ema-debuglog'
      mountPath: /enactor/app/config/enactor-web-maintenance-processing.log.properties
      subPath: enactor-web-maintenance-processing.log.properties
      
initcontainers:
  dependsOn:
    deploy: true
